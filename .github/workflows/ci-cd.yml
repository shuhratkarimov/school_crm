name: Frontend CI/CD Pipeline

on:
  push:
    branches:
      - frontend

jobs:
  build-and-deploy-frontend:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Clean up disk space before build
        run: |
          docker system prune -af || true
          sudo rm -rf ~/.npm/_cacache || true

      - name: Create .env file from GitHub Secrets
        run: |
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env
        working-directory: ./frontend

      - name: Install dependencies
        run: node --max-old-space-size=4096 $(which npm) install
        working-directory: ./frontend

      - name: Build frontend
        run: npm run build
        working-directory: ./frontend

      - name: Copy build files to Nginx root
        run: |
          sudo rm -rf /usr/share/nginx/html/*
          sudo cp -r ./frontend/dist/* /usr/share/nginx/html/
          sudo chown -R www-data:www-data /usr/share/nginx/html
          sudo systemctl reload nginx

      - name: Build frontend Docker image
        run: docker build -t my-vite-frontend:latest .
        working-directory: ./frontend

      - name: Save Docker image as archive
        run: docker save my-vite-frontend:latest | gzip > my-vite-frontend.tar.gz

      - name: Copy Docker image to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: shuhrat
          key: ${{ secrets.VPS_SSH_KEY }}
          source: my-vite-frontend.tar.gz
          target: /home/shuhrat/app
          overwrite: true

      - name: Deploy frontend to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: shuhrat
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /home/shuhrat/actions-runner/_work/school_crm/school_crm
            gunzip -c my-vite-frontend.tar.gz | docker load
            docker-compose stop frontend || true
            docker-compose rm -f frontend || true
            docker-compose up -d --force-recreate frontend
            docker image prune -f || true