name: CI/CD Pipeline
on:
  push:
    branches:
      - main
jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Build Docker image
        run: |
          docker build \
            --build-arg ENV_PORT=${{ secrets.ENV_PORT }} \
            --build-arg ENV_DB_HOST=${{ secrets.ENV_DB_HOST }} \
            --build-arg ENV_DB_USERNAME=${{ secrets.ENV_DB_USERNAME }} \
            --build-arg ENV_DB_PASSWORD=${{ secrets.ENV_DB_PASSWORD }} \
            --build-arg ENV_DB_DB_NAME=${{ secrets.ENV_DB_DB_NAME }} \
            --build-arg ENV_DB_PORT=${{ secrets.ENV_DB_PORT }} \
            --build-arg ENV_ACCESS_SECRET_KEY=${{ secrets.ENV_ACCESS_SECRET_KEY }} \
            --build-arg ENV_ACCESS_EXPIRING_TIME=${{ secrets.ENV_ACCESS_EXPIRING_TIME }} \
            --build-arg ENV_REFRESH_SECRET_KEY=${{ secrets.ENV_REFRESH_SECRET_KEY }} \
            --build-arg ENV_REFRESH_EXPIRING_TIME=${{ secrets.ENV_REFRESH_EXPIRING_TIME }} \
            --build-arg ENV_VERIFIER_EMAIL=${{ secrets.ENV_VERIFIER_EMAIL }} \
            --build-arg ENV_VERIFIER_GOOGLE_PASS_KEY=${{ secrets.ENV_VERIFIER_GOOGLE_PASS_KEY }} \
            --build-arg ENV_BOT_TOKEN=${{ secrets.ENV_BOT_TOKEN }} \
            --build-arg ENV_SMS_FIRST=${{ secrets.ENV_SMS_FIRST }} \
            --build-arg ENV_SMS_SECOND=${{ secrets.ENV_SMS_SECOND }} \
            --build-arg ENV_ALLOWED_ORIGINS=${{ secrets.ENV_ALLOWED_ORIGINS }} \
            -t my-express-app:latest .
        env:
          ENV_PORT: ${{ secrets.ENV_PORT }}
          ENV_DB_HOST: ${{ secrets.ENV_DB_HOST }}
          ENV_DB_USERNAME: ${{ secrets.ENV_DB_USERNAME }}
          ENV_DB_PASSWORD: ${{ secrets.ENV_DB_PASSWORD }}
          ENV_DB_DB_NAME: ${{ secrets.ENV_DB_DB_NAME }}
          ENV_DB_PORT: ${{ secrets.ENV_DB_PORT }}
          ENV_ACCESS_SECRET_KEY: ${{ secrets.ENV_ACCESS_SECRET_KEY }}
          ENV_ACCESS_EXPIRING_TIME: ${{ secrets.ENV_ACCESS_EXPIRING_TIME }}
          ENV_REFRESH_SECRET_KEY: ${{ secrets.ENV_REFRESH_SECRET_KEY }}
          ENV_REFRESH_EXPIRING_TIME: ${{ secrets.ENV_REFRESH_EXPIRING_TIME }}
          ENV_VERIFIER_EMAIL: ${{ secrets.ENV_VERIFIER_EMAIL }}
          ENV_VERIFIER_GOOGLE_PASS_KEY: ${{ secrets.ENV_VERIFIER_GOOGLE_PASS_KEY }}
          ENV_BOT_TOKEN: ${{ secrets.ENV_BOT_TOKEN }}
          ENV_SMS_FIRST: ${{ secrets.ENV_SMS_FIRST }}
          ENV_SMS_SECOND: ${{ secrets.ENV_SMS_SECOND }}
          ENV_ALLOWED_ORIGINS: ${{ secrets.ENV_ALLOWED_ORIGINS }}

      - name: Check disk space
        run: df -h || echo "Disk space check failed"

      - name: Clean up disk space
        run: |
          docker system prune -f || true
          rm -rf /tmp/*.tar.gz || true

      - name: Save Docker image
        run: |
          docker save my-express-app:latest | gzip > my-express-app.tar.gz
          if [ ! -f "my-express-app.tar.gz" ]; then echo "Error: Failed to save Docker image"; exit 1; fi
          ls -la

      - name: Verify files exist
        run: |
          ls -la
          if [ ! -f "my-express-app.tar.gz" ]; then echo "Error: my-express-app.tar.gz not found"; exit 1; fi
          if [ ! -f "docker-compose.yml" ]; then echo "Error: docker-compose.yml not found"; exit 1; fi
          if [ ! -f "schema.sql" ]; then echo "Error: schema.sql not found"; exit 1; fi

      - name: Validate SSH Key
        run: |
          echo "${{ secrets.VPS_SSH_KEY }}" > temp_key
          chmod 600 temp_key
          ssh-keygen -y -f temp_key || echo "SSH key validation failed"
          rm temp_key

      - name: Copy Docker image to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: shuhrat
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          source: 'my-express-app.tar.gz'
          target: '/home/shuhrat/app'
          overwrite: true

      - name: Copy docker-compose.yml to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: shuhrat
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          source: 'docker-compose.yml'
          target: '/home/shuhrat/app'
          overwrite: true

      - name: Copy schema.sql to VPS
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: shuhrat
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          source: 'schema.sql'
          target: '/home/shuhrat/app'
          overwrite: true

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: shuhrat
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script: |
            cd /home/shuhrat/app
            df -h
            docker system prune -f || true
            if [ -f "my-express-app.tar.gz" ]; then gunzip -c my-express-app.tar.gz | docker load; else echo "Error: my-express-app.tar.gz not found"; exit 1; fi
            if [ -f "docker-compose.yml" ]; then docker-compose down || true; docker-compose up -d db; sleep 10; else echo "Error: docker-compose.yml not found"; exit 1; fi
            if [ -f "schema.sql" ]; then cat schema.sql | docker exec -i app_db_1 psql -U postgres -d crm; else echo "Error: schema.sql not found"; exit 1; fi
            docker-compose up -d